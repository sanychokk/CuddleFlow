from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

import os
import asyncio
import aiosqlite
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import io
import db  # —Ç–≤–æ–π db.py
from dotenv import load_dotenv

load_dotenv()

token = os.environ.get("BOT_TOKEN")
print(token)
bot = Bot(token)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class Form(StatesGroup):
    waiting_for_cycle = State()
    waiting_for_cravings = State()

@dp.message(Command("start"))
async def start(msg: types.Message):
    kb = InlineKeyboardBuilder()
    kb.button(text="–Ø –¥–µ–≤—É—à–∫–∞", callback_data="role_girl")
    kb.button(text="–Ø –ø–∞—Ä–µ–Ω—å", callback_data="role_boy")
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –ö—Ç–æ —Ç—ã?", reply_markup=kb.as_markup())

@dp.callback_query(F.data.startswith("role_"))
async def choose_role(callback: types.CallbackQuery):
    role = callback.data.split("_")[1]
    user_id = callback.from_user.id
    name = callback.from_user.full_name

    await db.create_user(user_id, role, name)

    if role == "girl":
        await callback.message.answer(
            "–¢—ã –≤—ã–±—Ä–∞–ª–∞ —Ä–æ–ª—å: –¥–µ–≤—É—à–∫–∞ üå∏\n–¢–µ–ø–µ—Ä—å –º–æ–∂–µ—à—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /panel"
        )
    else:
        await callback.message.answer(
            "–¢—ã –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å: –ø–∞—Ä–µ–Ω—å üß∏\n–¢—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–Ω—è—à–µ–∫."
        )
    await callback.answer()

@dp.message(Command("panel"))
async def show_panel(msg: types.Message):
    user_id = msg.from_user.id
    role = await db.get_user_role(user_id)

    kb = InlineKeyboardBuilder()

    if role == "girl":
        kb.button(text="üî¥ –ù–∞—á–∞–ª–∏—Å—å –º–µ—Å—è—á–Ω—ã–µ", callback_data="start_period")
        kb.button(text="üìÖ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å", callback_data="show_calendar")
        kb.button(text="‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ü–∏–∫–ª", callback_data="set_cycle")
        kb.button(text="üîó –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥ –¥–ª—è –ø–∞—Ä–Ω—è", callback_data="gen_code")
        await msg.answer("–ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:", reply_markup=kb.as_markup())

    elif role == "boy":
        kb.button(text="üç¨ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –≤–∫—É—Å–Ω—è—à–µ–∫", callback_data="get_cravings")
        await msg.answer("–ü–∞–Ω–µ–ª—å –ø–∞—Ä–Ω—è:", reply_markup=kb.as_markup())

    else:
        await msg.answer("–¢—ã –Ω–µ –≤—ã–±—Ä–∞–ª —Ä–æ–ª—å. –ù–∞–ø–∏—à–∏ /start")

# --- FSM –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ü–∏–∫–ª–∞ ---
@dp.callback_query(F.data == "set_cycle")
async def set_cycle(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ü–∏–∫–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 28):")
    await state.set_state(Form.waiting_for_cycle)
    await callback.answer()

@dp.message(Form.waiting_for_cycle)
async def save_cycle_length(msg: types.Message, state: FSMContext):
    try:
        days = int(msg.text.strip())
        if 20 <= days <= 45:
            await db.set_cycle_length(msg.from_user.id, days)
            await msg.answer(f"‚úÖ –¶–∏–∫–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {days} –¥–Ω–µ–π.")
            await state.clear()
        else:
            await msg.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏ —á–∏—Å–ª–æ –æ—Ç 20 –¥–æ 45.")
    except:
        await msg.answer("–ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 28")

# --- FSM –¥–ª—è –Ω–∞—á–∞–ª–∞ –ø–µ—Ä–∏–æ–¥–∞ –∏ –≤–≤–æ–¥–∞ –≤–∫—É—Å–Ω—è—à–µ–∫ ---
@dp.callback_query(F.data == "start_period")
async def start_period(callback: types.CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id
    today = datetime.now().strftime("%Y-%m-%d")
    await db.set_last_period_date(user_id, today)
    await callback.message.answer("–ó–∞–ø–∏—Å–∞–ª–∞! –ê —Ç–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏, —á—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å:")
    await state.set_state(Form.waiting_for_cravings)
    await callback.answer()

@dp.message(Form.waiting_for_cravings)
async def save_cravings(msg: types.Message, state: FSMContext):
    text = msg.text.strip()
    await db.set_cravings(msg.from_user.id, text)
    await msg.answer("–ó–∞–ø–∏—Å–∞–ª–∞ üç´üíê")
    await state.clear()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–∞—Ä–Ω—é —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
    async with aiosqlite.connect(db.DB_NAME) as conn:
        cursor = await conn.execute("SELECT partner_id FROM users WHERE tg_id = ?", (msg.from_user.id,))
        row = await cursor.fetchone()

    if row and row[0]:
        partner_id = row[0]
        kb = InlineKeyboardBuilder()
        kb.button(text="üí≥ –û–±—è–∑—É—é—Å—å –∫—É–ø–∏—Ç—å –≤–∫—É—Å–Ω—è—à–∫–∏ —Å–≤–æ–µ–π –ª—é–±–∏–º–æ–π", callback_data="confirm_payment")

        await bot.send_message(
            partner_id,
            f"üç¨ –ï–π —Ö–æ—á–µ—Ç—Å—è: {text}\n\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –µ—Å–ª–∏ –æ–±—è–∑—É–µ—à—å—Å—è –∫—É–ø–∏—Ç—å –≤–∫—É—Å–Ω—è—à–∫–∏.",
            reply_markup=kb.as_markup()
        )

@dp.callback_query(F.data == "confirm_payment")
async def confirm_payment(callback: types.CallbackQuery):
    payer_id = callback.from_user.id  # –ø–∞—Ä–µ–Ω—å
    async with aiosqlite.connect(db.DB_NAME) as conn:
        cursor = await conn.execute("SELECT partner_id FROM users WHERE tg_id = ?", (payer_id,))
        row = await cursor.fetchone()

    if row and row[0]:
        girl_id = row[0]
        # –ü–∞—Ä–Ω—é ‚Äî –æ—Ç–≤–µ—Ç –≤ —á–∞—Ç
        await callback.message.answer("–°–ø–∞—Å–∏–±–æ –∑–∞ –∑–∞–±–æ—Ç—É! üíñ")
        # –î–µ–≤—É—à–∫–µ ‚Äî —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±—è–∑–∞—Ç–µ–ª—å—Å—Ç–≤–µ –æ–ø–ª–∞—Ç–∏—Ç—å
        await bot.send_message(girl_id, "–û–±—è–∑—É—é—Å—å –∫—É–ø–∏—Ç—å –≤–∫—É—Å–Ω—è—à–∫–∏ –Ω–µ –ø–æ–∑–¥–Ω–µ–µ —Ç—Ä—ë—Ö –¥–Ω–µ–π üí™")

    await callback.answer()

@dp.callback_query(F.data == "show_calendar")
async def show_calendar_callback(callback: types.CallbackQuery):
    await show_calendar(callback.message)
    await callback.answer()

@dp.message(Command("calendar"))
async def show_calendar(msg: types.Message):
    user_id = msg.from_user.id
    async with aiosqlite.connect(db.DB_NAME) as conn:
        cursor = await conn.execute("SELECT last_period_date FROM users WHERE tg_id = ?", (user_id,))
        row = await cursor.fetchone()

    if not row or not row[0]:
        await msg.answer("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º —Ü–∏–∫–ª–µ. –ù–∞–∂–º–∏ ¬´üî¥ –ù–∞—á–∞–ª–∏—Å—å –º–µ—Å—è—á–Ω—ã–µ¬ª –≤ /panel.")
        return

    last_date = datetime.strptime(row[0], "%Y-%m-%d")
    cycle_days = await db.get_cycle_length(user_id)
    period_days = 5

    period_dates = [last_date + timedelta(days=i) for i in range(period_days)]
    next_start = last_date + timedelta(days=cycle_days)
    next_period = [next_start + timedelta(days=i) for i in range(period_days)]

    days = [last_date + timedelta(days=i) for i in range(35)]
    colors = []

    for day in days:
        if day in period_dates:
            colors.append("red")
        elif day in next_period:
            colors.append("pink")
        else:
            colors.append("lightgray")

    fig, ax = plt.subplots(figsize=(10, 1))
    ax.barh(["–¶–∏–∫–ª"], [1]*len(days), left=range(len(days)), color=colors)
    ax.set_yticks([])
    ax.set_xticks(range(len(days)))
    ax.set_xticklabels([d.strftime("%d.%m") for d in days], rotation=45)
    plt.tight_layout()

    buf = io.BytesIO()
    plt.savefig(buf, format='png')
    buf.seek(0)
    plt.close()

    await msg.answer_photo(photo=buf, caption="üìÖ –¢–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å: –∫—Ä–∞—Å–Ω–æ–µ ‚Äî —Å–µ–π—á–∞—Å, —Ä–æ–∑–æ–≤–æ–µ ‚Äî —Å–ª–µ–¥—É—é—â–µ–µ")

@dp.callback_query(F.data == "get_cravings")
async def get_cravings(callback: types.CallbackQuery):
    text = await db.get_cravings(callback.from_user.id)
    if text:
        await callback.message.answer(f"üç¨ –ï–π —Ö–æ—á–µ—Ç—Å—è: {text}")
    else:
        await callback.message.answer("–ü–æ–∫–∞ –Ω–µ—Ç —Å–ø–∏—Å–∫–∞ –≤–∫—É—Å–Ω—è—à–µ–∫ üò¢")
    await callback.answer()

@dp.callback_query(F.data == "gen_code")
async def generate_code(callback: types.CallbackQuery):
    code = await db.generate_invite_code(callback.from_user.id)
    await callback.message.answer(
        f"üîó –¢–≤–æ–π –∫–æ–¥: `{code}`\n–û—Ç–ø—Ä–∞–≤—å –µ–≥–æ —Å–≤–æ–µ–º—É –ø–∞—Ä–Ω—é ‚Äî –ø—É—Å—Ç—å –≤–≤–µ–¥—ë—Ç –∫–æ–º–∞–Ω–¥—É:\n\n`/connect {code}`",
        parse_mode="Markdown"
    )
    await callback.answer()

@dp.message(Command("connect"))
async def connect_partner(msg: types.Message):
    args = msg.text.split()
    if len(args) != 2:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /connect –ö–û–î")
        return

    code = args[1].strip().upper()
    success = await db.connect_users_by_code(code, msg.from_user.id)

    if success:
        await msg.answer("‚úÖ –°–≤—è–∑—å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞! –¢–µ–ø–µ—Ä—å —Ç—ã –±—É–¥–µ—à—å –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏ –≤–∫—É—Å–Ω—è—à–∫–∏.")
    else:
        await msg.answer("‚ùå –ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å.")

async def reminder_loop():
    while True:
        girls = await db.get_reminder_targets()
        for girl_id, partner_id, name in girls:
            try:
                await bot.send_message(
                    partner_id,
                    f"üìÖ –ü–æ—Ö–æ–∂–µ, —É {name or '—Ç–≤–æ–µ–π –¥–µ–≤—É—à–∫–∏'} —Å–∫–æ—Ä–æ —Å–Ω–æ–≤–∞ –Ω–∞—á–Ω—É—Ç—Å—è –º–µ—Å—è—á–Ω—ã–µ.\n–ü–æ–¥–¥–µ—Ä–∂–∏ –µ—ë üíñ"
                )
                await db.set_last_period_date(girl_id, None)
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏: {e}")
        await asyncio.sleep(86400)  # —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏

async def main():
    await db.init_db()
    asyncio.create_task(reminder_loop())
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
